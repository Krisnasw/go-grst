// Code generated by protoc-gen-cdd. DO NOT EDIT.
// source: province.proto
package province

import (
	"net/http"
	"strings"

	"github.com/krisnasw/go-grst/grst"
	grst_errors "github.com/krisnasw/go-grst/grst/errors"
	"google.golang.org/grpc"

	"github.com/mcuadros/go-defaults"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/credentials"
	"gopkg.in/validator.v2"
)

type fullMethods struct {
	Province_Get    string
	Province_GetAll string
}

var FullMethods = fullMethods{
	Province_Get:    "/province.province/Get",
	Province_GetAll: "/province.province/GetAll",
}

var NeedAuthFullMethods = []string{}

type AuthConfig struct {
	NeedAuth bool
	Roles    []string
}

var AuthConfigFullMethods = map[string]AuthConfig{
	"/province.province/Get":    AuthConfig{NeedAuth: false, Roles: []string{"*"}},
	"/province.province/GetAll": AuthConfig{NeedAuth: false, Roles: []string{"*"}},
}

var NeedApiKeyFullMethods = []string{}

func ValidateRequest(req interface{}) error {
	defaults.SetDefaults(req)
	if errs := validator.Validate(req); errs != nil {
		validateError := []*grst_errors.ErrorDetail{}
		for field, err := range errs.(validator.ErrorMap) {
			errMessage := strings.Replace(err.Error(), "{field}", field, -1)
			validateError = append(validateError, &grst_errors.ErrorDetail{Code: 999, Field: field, Message: errMessage})
		}
		return grst_errors.New(http.StatusBadRequest, codes.InvalidArgument, 999, "Validation Error", validateError...)
	}

	return nil
}

/*==================== Province Section ====================*/

func RegisterProvinceGrstServer(grpcRestServer *grst.Server, hndl ProvinceServer) {

	forward_Province_Get_0 = grpcRestServer.GetForwardResponseMessage()

	forward_Province_Get_1 = grpcRestServer.GetForwardResponseMessage()

	forward_Province_GetAll_0 = grpcRestServer.GetForwardResponseMessage()

	RegisterProvinceServer(grpcRestServer.GetGrpcServer(), hndl)
	grpcRestServer.RegisterRestHandler(RegisterProvinceHandler)
}

func NewProvinceGrstClient(serverHost string, creds *credentials.TransportCredentials, dialOpts ...grpc.DialOption) (ProvinceClient, error) {
	opts := []grpc.DialOption{}
	opts = append(opts, grpc.WithDefaultCallOptions(grpc.MaxCallRecvMsgSize(1024*1024*20)))
	opts = append(opts, grpc.WithMaxMsgSize(1024*1024*20))
	if creds == nil {
		opts = append(opts, grpc.WithInsecure())
	} else {
		opts = append(opts, grpc.WithTransportCredentials(*creds))
	}
	opts = append(opts, dialOpts...)
	grpcConn, err := grpc.Dial(serverHost, opts...)
	return NewProvinceClient(grpcConn), err
}
