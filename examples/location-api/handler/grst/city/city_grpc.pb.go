// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package city

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CityClient is the client API for City service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CityClient interface {
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*City, error)
	Search(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*CityProfiles, error)
	FileDownload(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FileDownloadResp, error)
}

type cityClient struct {
	cc grpc.ClientConnInterface
}

func NewCityClient(cc grpc.ClientConnInterface) CityClient {
	return &cityClient{cc}
}

func (c *cityClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*City, error) {
	out := new(City)
	err := c.cc.Invoke(ctx, "/city.city/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityClient) Search(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*CityProfiles, error) {
	out := new(CityProfiles)
	err := c.cc.Invoke(ctx, "/city.city/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cityClient) FileDownload(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FileDownloadResp, error) {
	out := new(FileDownloadResp)
	err := c.cc.Invoke(ctx, "/city.city/FileDownload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CityServer is the server API for City service.
// All implementations must embed UnimplementedCityServer
// for forward compatibility
type CityServer interface {
	Get(context.Context, *GetReq) (*City, error)
	Search(context.Context, *SearchReq) (*CityProfiles, error)
	FileDownload(context.Context, *empty.Empty) (*FileDownloadResp, error)
	mustEmbedUnimplementedCityServer()
}

// UnimplementedCityServer must be embedded to have forward compatible implementations.
type UnimplementedCityServer struct {
}

func (UnimplementedCityServer) Get(context.Context, *GetReq) (*City, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCityServer) Search(context.Context, *SearchReq) (*CityProfiles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedCityServer) FileDownload(context.Context, *empty.Empty) (*FileDownloadResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileDownload not implemented")
}
func (UnimplementedCityServer) mustEmbedUnimplementedCityServer() {}

// UnsafeCityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CityServer will
// result in compilation errors.
type UnsafeCityServer interface {
	mustEmbedUnimplementedCityServer()
}

func RegisterCityServer(s *grpc.Server, srv CityServer) {
	s.RegisterService(&_City_serviceDesc, srv)
}

func _City_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/city.city/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _City_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/city.city/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityServer).Search(ctx, req.(*SearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _City_FileDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityServer).FileDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/city.city/FileDownload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityServer).FileDownload(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _City_serviceDesc = grpc.ServiceDesc{
	ServiceName: "city.city",
	HandlerType: (*CityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _City_Get_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _City_Search_Handler,
		},
		{
			MethodName: "FileDownload",
			Handler:    _City_FileDownload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "city.proto",
}
