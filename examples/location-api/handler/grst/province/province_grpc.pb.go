// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package province

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ProvinceClient is the client API for Province service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProvinceClient interface {
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*Province, error)
	GetAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Provinces, error)
}

type provinceClient struct {
	cc grpc.ClientConnInterface
}

func NewProvinceClient(cc grpc.ClientConnInterface) ProvinceClient {
	return &provinceClient{cc}
}

func (c *provinceClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*Province, error) {
	out := new(Province)
	err := c.cc.Invoke(ctx, "/province.province/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provinceClient) GetAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Provinces, error) {
	out := new(Provinces)
	err := c.cc.Invoke(ctx, "/province.province/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProvinceServer is the server API for Province service.
// All implementations must embed UnimplementedProvinceServer
// for forward compatibility
type ProvinceServer interface {
	Get(context.Context, *GetReq) (*Province, error)
	GetAll(context.Context, *empty.Empty) (*Provinces, error)
	mustEmbedUnimplementedProvinceServer()
}

// UnimplementedProvinceServer must be embedded to have forward compatible implementations.
type UnimplementedProvinceServer struct {
}

func (UnimplementedProvinceServer) Get(context.Context, *GetReq) (*Province, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedProvinceServer) GetAll(context.Context, *empty.Empty) (*Provinces, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedProvinceServer) mustEmbedUnimplementedProvinceServer() {}

// UnsafeProvinceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProvinceServer will
// result in compilation errors.
type UnsafeProvinceServer interface {
	mustEmbedUnimplementedProvinceServer()
}

func RegisterProvinceServer(s *grpc.Server, srv ProvinceServer) {
	s.RegisterService(&_Province_serviceDesc, srv)
}

func _Province_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvinceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/province.province/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvinceServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Province_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvinceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/province.province/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvinceServer).GetAll(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Province_serviceDesc = grpc.ServiceDesc{
	ServiceName: "province.province",
	HandlerType: (*ProvinceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Province_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _Province_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "province.proto",
}
