package entity

import (
	"bytes"
	"go/format"
	"strings"
	"text/template"

	"github.com/krisnasw/go-grst/protoc-gen-cdd/descriptor"
	"github.com/krisnasw/go-grst/protoc-gen-cdd/generator"
	"google.golang.org/protobuf/compiler/protogen"
)

var (
	tmplEntity = template.Must(template.New("entity-body").Funcs(template.FuncMap{
		"getGoStandartType": getGoStandartType,
		"isRepeatTypeField": isRepeatTypeField,
	}).Parse(`
	// Code generated by protoc-gen-cdd. DO NOT EDIT.
	// source: {{.FileExt.GetName}}

	package entity
	
	{{ if .NeedImportTime }}
	import (
		"time"
	)
	{{ end }}

	type {{.GetName}} struct {
		{{- range $fext := .FieldExt}}
		{{$fext.GetName}} {{ if isRepeatTypeField $fext}}[]{{ end }}{{ if $fext.MysqlField.Nullable }}*{{ end }}{{getGoStandartType $fext}} ` + "`" + `json:"{{$fext.GetJsonName}}"` + "`" + `
		{{- end}}
	}
	`))
)

func ApplyTemplateEntity(mext *descriptor.MessageDescriptorExt, fext *descriptor.FileDescriptorExt) (*generator.GeneratorResponseFile, error) {
	w := bytes.NewBuffer(nil)

	var tmplData = struct {
		*descriptor.MessageDescriptorExt
		FileExt        *descriptor.FileDescriptorExt
		NeedImportTime bool
	}{
		mext,
		fext,
		needImportTime(mext),
	}

	if err := tmplEntity.Execute(w, tmplData); err != nil {
		return nil, err
	}

	formatted, err := format.Source([]byte(w.String()))
	if err != nil {
		return nil, err
	}

	return &generator.GeneratorResponseFile{
		Filename:     "" + strings.ToLower(mext.GetName()) + ".cdd.go",
		Content:      string(formatted),
		GoImportPath: protogen.GoImportPath(""),
	}, nil
}
