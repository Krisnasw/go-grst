package usecase_mysql

import (
	"bytes"
	"go/format"
	"text/template"

	"github.com/krisnasw/go-grst/protoc-gen-cdd/generator"
	"google.golang.org/protobuf/compiler/protogen"
)

var (
	tmplUseCaseIntf = template.Must(template.New("usecase-intf").Funcs(template.FuncMap{}).Parse(`
	// Code generated by protoc-gen-cdd. DO NOT EDIT.
	// source: {{.FileExt.GetName}}

	package {{.GetCrudPackageName}}
	
	import (
		"{{.GoModuleName}}/entity"
	)
	
	type Repository interface {
		additional_repository
		GetByPrimaryKey({{ .GetPrimaryKeyAsString "" "" "," true true }}) (*entity.{{.GetName }}, error)
		GetAll() ([]*entity.{{.GetName}}, error)
		Create(in entity.{{.GetName}}) (*entity.{{.GetName}}, error)
		Update(in entity.{{.GetName}}) (*entity.{{.GetName}}, error)
		Delete({{ .GetPrimaryKeyAsString "" "" "," true true }}) error
	}

	type UseCase interface {
		additional_usecase
		GetByPrimaryKey({{ .GetPrimaryKeyAsString "" "" "," true true }}) (*entity.{{.GetName}}, error)
		GetAll() ([]*entity.{{.GetName}}, error)
		Create(in entity.{{.GetName}}) (*entity.{{.GetName}}, error)
		Update(in entity.{{.GetName}}) (*entity.{{.GetName}}, error)
		Delete({{ .GetPrimaryKeyAsString "" "" "," true true }}) error
	}
	
	// Please write code below in interface.go
	/*
	package {{.GetCrudPackageName}}

	type additional_repository interface{
		// AdditionalFunc1()
		// AdditionalFunc2()
	}

	type additional_usecase interface {
		// AdditionalFunc1()
		// AdditionalFunc2()
	}
	*/

	`))
)

func applyTemplateUseCaseIntf(sm ScaffoldMysql) (*generator.GeneratorResponseFile, error) {
	w := bytes.NewBuffer(nil)

	var tmplData = struct {
		ScaffoldMysql
	}{
		sm,
	}

	if err := tmplUseCaseIntf.Execute(w, tmplData); err != nil {
		return nil, err
	}

	formatted, err := format.Source([]byte(w.String()))
	if err != nil {
		return nil, err
	}

	return &generator.GeneratorResponseFile{
		Filename:     "usecase/" + sm.GetCrudPackageName() + "/interface.cdd.go",
		Content:      string(formatted),
		GoImportPath: protogen.GoImportPath(""),
	}, nil
}
