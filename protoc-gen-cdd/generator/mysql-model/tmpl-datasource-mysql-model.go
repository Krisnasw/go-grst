package mysql_model

import (
	"bytes"
	"go/format"
	"text/template"

	"github.com/krisnasw/go-grst/protoc-gen-cdd/descriptor"
	"github.com/krisnasw/go-grst/protoc-gen-cdd/generator"
	"google.golang.org/protobuf/compiler/protogen"
)

var (
	tmplMysqlModel = template.Must(template.New("mysql-model-header").Funcs(template.FuncMap{
		"getGormTagAttribute": getGormTagAttribute,
		"getGoStandartType":   getGoStandartType,
	}).Parse(`
	// Code generated by protoc-gen-cdd. DO NOT EDIT.
	// source: {{.FileExt.GetName}}

	package {{.Mysql.TableName}}
	
	{{ if .NeedImportTime }}
	import (
		"time"
	)
	{{ end }}

	// Mysql Table: {{.Mysql.TableName}}
	type {{.GetName}}Model struct {
		{{- range $fext := .FieldExt}}
		{{$fext.GetName}} {{ if $fext.MysqlField.Nullable }}*{{ end }}{{getGoStandartType $fext}} ` + "`" + `gorm:"{{getGormTagAttribute $fext}}"` + "`" + `
		{{- end}}
		
		{{if not .Mysql.DisableTimestampTracking}}
		CreatedAt *time.Time ` + "`" + `gorm:"column:created_at"` + "`" + `
		UpdatedAt *time.Time ` + "`" + `gorm:"column:updated_at"` + "`" + `
		{{end}}
	}
		
	`))
)

func applyTemplateMysqlModel(mmp MysqlModelParam, fext *descriptor.FileDescriptorExt) (*generator.GeneratorResponseFile, error) {
	w := bytes.NewBuffer(nil)

	needImportTime := false
	needImportTime = needImportTime || mmp.NeedImportTime()

	var tmplData = struct {
		MysqlModelParam
		FileExt        *descriptor.FileDescriptorExt
		NeedImportTime bool
	}{
		mmp,
		fext,
		needImportTime,
	}

	if err := tmplMysqlModel.Execute(w, tmplData); err != nil {
		return nil, err
	}

	formatted, err := format.Source([]byte(w.String()))
	if err != nil {
		return nil, err
	}

	return &generator.GeneratorResponseFile{
		Filename:     mmp.Mysql.TableName + "/model.cdd.go",
		Content:      string(formatted),
		GoImportPath: protogen.GoImportPath(""),
	}, nil
}
