package gengo_mysql_query

import (
	"bytes"
	"go/format"
	"text/template"

	"github.com/iancoleman/strcase"
)

var (
	tmplQuery = template.Must(template.New("query").Funcs(template.FuncMap{
		"ToSnake": strcase.ToSnake,
	}).Parse(`
	// Code generated by "cdd gen go-ds-mysql". DO NOT EDIT.
	// source: {{.GeneratedFrom}}

	package {{.PackageName}}
	
	import (
		{{ if .NeedImportTime }} "time" {{ end }}
		"gorm.io/gorm"
	)

	type MysqlDatasource struct {
		db        *gorm.DB
		tableName string
	}

	func NewMysqlDatasource(db *gorm.DB) *MysqlDatasource {
		return &MysqlDatasource{db, "{{.TableName}}"}
	}
	
	func (r *MysqlDatasource) Get({{ .GetPrimaryKeyAsString "" "" "," true true }}) (*{{.GetName}}, error) {
		result := &{{.GetName}}{}
		err := r.db.Table(r.tableName).Where("{{ .GetPrimaryKeyAsQueryStmt }}", {{ .GetPrimaryKeyAsString "" "" "," true false }}).First(&result).Error
		return result, err
	}

	func (r *MysqlDatasource) GetAll() ([]*{{.GetName}}, error) {
		result := []*{{.GetName}}{}
		err := r.db.Table(r.tableName).Find(&result).Error
		return result, err
	}

	func (r *MysqlDatasource) Create(in {{.GetName}}) (*{{.GetName}}, error) {
		{{ if or .IsCreatedAt .IsUpdatedAt }} timeNow := time.Now() {{ end }}
		{{ if .IsCreatedAt}} in.CreatedAt = &timeNow {{ end }}
		{{ if .IsUpdatedAt}} in.UpdatedAt = &timeNow {{ end }}

		err := r.db.Table(r.tableName).Create(&in).Error
		if err != nil {
			return nil, err
		}
		return &in, nil
	}

	func (r *MysqlDatasource) Update(in {{.GetName}}) (*{{.GetName}}, error) {
		{{ if or .IsCreatedAt .IsUpdatedAt }} timeNow := time.Now() {{ end }}
		{{ if .IsCreatedAt}} in.CreatedAt = nil {{ end }}
		{{ if .IsUpdatedAt}} in.UpdatedAt = &timeNow {{ end }}
		err := r.db.Table(r.tableName).Where("{{ .GetPrimaryKeyAsQueryStmt }}", {{ .GetPrimaryKeyAsString "in." "" "," false false }}).Updates(&in).Error
		if err != nil {
			return nil, err
		}
		return &in, nil
	}

	func (r *MysqlDatasource) Delete({{ .GetPrimaryKeyAsString "" "" "," true true }}) error {
		return r.db.Table(r.tableName).Delete(&{{.GetName}}{}, "{{ .GetPrimaryKeyAsQueryStmt }}", {{ .GetPrimaryKeyAsString "" "" "," true false }}).Error
	}

	`))
)

func applyTemplateQuery(model MysqlModel, packageName string, outputDir string, generatedfrom string) (*generatorResponseFile, error) {

	w := bytes.NewBuffer(nil)
	var tmplData = struct {
		MysqlModel
		PackageName   string
		GeneratedFrom string
	}{
		model,
		packageName,
		generatedfrom,
	}

	if err := tmplQuery.Execute(w, tmplData); err != nil {
		return nil, err
	}

	formatted, err := format.Source([]byte(w.String()))
	if err != nil {
		return nil, err
	}
	return &generatorResponseFile{
		outputPath: outputDir + "/query.gen.go",
		content:    string(formatted),
	}, nil

}
